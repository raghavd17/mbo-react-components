@use './../tokens' as *;
// @mixin break-point($break-point) {
//     @media (min-width: map-get($map: $token-breakpoints, $key: $break-point)) {
//         @content;
//     }
// }

// new mixin for breakpoints 

// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)
//
// The map defined in the `$token-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))
//    md
@function breakpoint-next($name, $breakpoints: $token-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
    $n: index($breakpoint-names, $name);
    @if not $n {
      @error "breakpoint `#{$name}` not found in `#{$breakpoints}`";
    }
    @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
  }
  
  // Minimum breakpoint width. Null for the smallest (first) breakpoint.
  //
  //    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
  //    576px
  @function breakpoint-min($name, $breakpoints: $token-breakpoints) {
    $min: map-get($breakpoints, $name);
    @return if($min != 0, $min, null);
  }
  
  // Maximum breakpoint width.
  
  //    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
  //    767.98px
  @function breakpoint-max($name, $breakpoints: $token-breakpoints) {
    $max: map-get($breakpoints, $name);
    @return if($max and $max > 0, $max - .02, null);
  }
  
  // Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
  // Useful for making responsive utilities.
  //
  //    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
  //    ""  (Returns a blank string)
  //    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))
  //    "-sm"
  @function breakpoint-infix($name, $breakpoints: $token-breakpoints) {
    @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
  }
  
  // Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
  // Makes the @content apply to the given breakpoint and wider.
  @mixin breakpoint-up($name, $breakpoints: $token-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    @if $min {
      @media (min-width: $min) {
        @content;
      }
    } @else {
      @content;
    }
  }
  
  // Media of at most the maximum breakpoint width. No query for the largest breakpoint.
  // Makes the @content apply to the given breakpoint and narrower.
  @mixin breakpoint-down($name, $breakpoints: $token-breakpoints) {
    $max: breakpoint-max($name, $breakpoints);
    @if $max {
      @media (max-width: $max) {
        @content;
      }
    } @else {
      @content;
    }
  }
  
  // Media that spans multiple breakpoint widths.
  // Makes the @content apply between the min and max breakpoints
  @mixin breakpoint-between($lower, $upper, $breakpoints: $token-breakpoints) {
    $min: breakpoint-min($lower, $breakpoints);
    $max: breakpoint-max($upper, $breakpoints);
  
    @if $min != null and $max != null {
      @media (min-width: $min) and (max-width: $max) {
        @content;
      }
    } @else if $max == null {
      @include breakpoint-up($lower, $breakpoints) {
        @content;
      }
    } @else if $min == null {
      @include breakpoint-down($upper, $breakpoints) {
        @content;
      }
    }
  }
  
  // Media between the breakpoint's minimum and maximum widths.
  // No minimum for the smallest breakpoint, and no maximum for the largest one.
  // Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
  @mixin breakpoint-only($name, $breakpoints: $token-breakpoints) {
    $min:  breakpoint-min($name, $breakpoints);
    $next: breakpoint-next($name, $breakpoints);
    $max:  breakpoint-max($next, $breakpoints);
  
    @if $min != null and $max != null {
      @media (min-width: $min) and (max-width: $max) {
        @content;
      }
    } @else if $max == null {
      @include breakpoint-up($name, $breakpoints) {
        @content;
      }
    } @else if $min == null {
      @include breakpoint-down($next, $breakpoints) {
        @content;
      }
    }
  }
  //  mixin breakpoint end 
  
  //  Example:
  //    @include breakpoint-up(sm) { ... }
  //    @include breakpoint-down(md)  { ... }
  //    @include breakpoint-between(sm, md) { ... }
  //    @include breakpoint-only(xs) { ... }
  
  
  
  //  These mixins are to apply the orientation media query rule.
  //
  //  Example:
  //    @include landscape() { ... }
  //    @include portrait()  { ... }
  //    @include landscape-up(sm) { ... }
  //    @include landscape-down(sm) { ... }
  //    @include portrait-up(sm)  { ... }
  //    @include portrait-down(sm)  { ... }
  
  // Portrait
  @mixin portrait() {
      @media screen and (orientation:portrait) { @content; }
  }
  
  @mixin portrait-up($name) {
      @include portrait {
          @include breakpoint-up($name) {
              @content;
          }
      }
  }
  
  @mixin portrait-down($name) {
      @include portrait {
          @include breakpoint-down($name) {
              @content;
          }
      }
  }
  
  // Landscape
  @mixin landscape() {
      @media screen and (orientation:landscape) { @content; }
  }
  
  @mixin landscape-up($name) {
      @include landscape {
          @include breakpoint-up($name) {
              @content;
          }
      }
  }
  
  @mixin landscape-down($name) {
      @include landscape {
          @include breakpoint-down($name) {
              @content;
          }
      }
  }