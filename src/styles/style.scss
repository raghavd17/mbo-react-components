@use "sass:list";
@use "./tokens" as *; // design tokens
@use "./reset" as *; // CSS reset

// @import 'open-props/__open-props.scss';  // open-props variables
// @import 'open-props/__normalize.scss';  // to get the normalize styles from open-props
// Typography system (golden ratio)
@function size($size) {
  @if $token-fluid {
    $reducer: if($size <= 1, 1.1, 0.9);
    $min: $reducer * $size;
    @return clamp(#{$min}rem, #{$size} * 2vw, #{$size} * 1.2rem);
  } @else {
    @return #{$size}rem;
  }
}

/*******
* Generate CSS custom properties
*******/
:root {
  // colors with nested loops
  @each $name, $shades in $token-colors {
    @each $shade, $value in $shades {
      --color-#{$name}-#{$shade}: #{$value};
    }
  }
  --color-transparent: transparent;
  --color-white: #fff;
  --color-black: #000;
  // create CSS variables around radius
  @each $name, $radius in $token-radius {
    --radius-#{$name}: #{$radius};
  }
  // create CSS variables around opacity
  @each $name, $opacity in $token-opacity {
    --opacity-#{$name}: #{$opacity};
  }
  // create CSS variables around ratio
  // @each $name, $ratio in $token-ratio {
  //   --ratio-#{$name}: #{$ratio};
  // }
  //TODO: need to make it autogenrated
  --ease-1: cubic-bezier(0.25, 0, 0.5, 1);
  --ease-2: cubic-bezier(0.25, 0, 0.4, 1);
  --ease-3: cubic-bezier(0.25, 0, 0.3, 1);
  --ease-4: cubic-bezier(0.25, 0, 0.2, 1);
  --ease-5: cubic-bezier(0.25, 0, 0.1, 1);
  --ease-in-1: cubic-bezier(0.25, 0, 1, 1);
  --ease-in-2: cubic-bezier(0.5, 0, 1, 1);
  --ease-in-3: cubic-bezier(0.7, 0, 1, 1);
  --ease-in-4: cubic-bezier(0.9, 0, 1, 1);
  --ease-in-5: cubic-bezier(1, 0, 1, 1);
  --ease-out-1: cubic-bezier(0, 0, 0.75, 1);
  --ease-out-2: cubic-bezier(0, 0, 0.5, 1);
  --ease-out-3: cubic-bezier(0, 0, 0.3, 1);
  --ease-out-4: cubic-bezier(0, 0, 0.1, 1);
  --ease-out-5: cubic-bezier(0, 0, 0, 1);
  --ease-in-out-1: cubic-bezier(0.1, 0, 0.9, 1);
  --ease-in-out-2: cubic-bezier(0.3, 0, 0.7, 1);
  --ease-in-out-3: cubic-bezier(0.5, 0, 0.5, 1);
  --ease-in-out-4: cubic-bezier(0.7, 0, 0.3, 1);
  --ease-in-out-5: cubic-bezier(0.9, 0, 0.1, 1);
  --ease-elastic-1: cubic-bezier(0.5, 0.75, 0.75, 1.25);
  --ease-elastic-2: cubic-bezier(0.5, 1, 0.75, 1.25);
  --ease-elastic-3: cubic-bezier(0.5, 1.25, 0.75, 1.25);
  --ease-elastic-4: cubic-bezier(0.5, 1.5, 0.75, 1.25);
  --ease-elastic-5: cubic-bezier(0.5, 1.75, 0.75, 1.25);
  --ease-squish-1: cubic-bezier(0.5, -0.1, 0.1, 1.5);
  --ease-squish-2: cubic-bezier(0.5, -0.3, 0.1, 1.5);
  --ease-squish-3: cubic-bezier(0.5, -0.5, 0.1, 1.5);
  --ease-squish-4: cubic-bezier(0.5, -0.7, 0.1, 1.5);
  --ease-squish-5: cubic-bezier(0.5, -0.9, 0.1, 1.5);
  --shadow-color: 220 3% 15%;
  --shadow-strength: 1%;
  --shadow-xs: 0 1px 2px -1px hsl(var(--shadow-color) /
        calc(var(--shadow-strength) + 9%));
  --shadow-sm: 0 3px 5px -2px hsl(var(--shadow-color) /
          calc(var(--shadow-strength) + 3%)),
    0 7px 14px -5px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 5%));
  --shadow-md: 0 -1px 3px 0 hsl(var(--shadow-color) /
          calc(var(--shadow-strength) + 2%)),
    0 1px 2px -5px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 2%)),
    0 2px 5px -5px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 4%)),
    0 4px 12px -5px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 5%)),
    0 12px 15px -5px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 7%));
  --shadow-lg: 0 -2px 5px 0 hsl(var(--shadow-color) /
          calc(var(--shadow-strength) + 2%)),
    0 1px 1px -2px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 3%)),
    0 2px 2px -2px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 3%)),
    0 5px 5px -2px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 4%)),
    0 9px 9px -2px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 5%)),
    0 16px 16px -2px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 6%));
  --shadow-xl: 0 -1px 2px 0 hsl(var(--shadow-color) /
          calc(var(--shadow-strength) + 2%)),
    0 2px 1px -2px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 3%)),
    0 5px 5px -2px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 3%)),
    0 10px 10px -2px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 4%)),
    0 20px 20px -2px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 5%)),
    0 40px 40px -2px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 7%));
  --shadow-xxl: 0 -1px 2px 0 hsl(var(--shadow-color) /
          calc(var(--shadow-strength) + 2%)),
    0 3px 2px -2px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 3%)),
    0 7px 5px -2px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 3%)),
    0 12px 10px -2px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 4%)),
    0 22px 18px -2px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 5%)),
    0 41px 33px -2px hsl(var(--shadow-color) / calc(var(--shadow-strength) + 6%)),
    0 100px 80px -2px hsl(var(--shadow-color) /
          calc(var(--shadow-strength) + 7%));
  --inner-shadow-xs: inset 0 0 0 1px
    hsl(var(--shadow-color) / calc(var(--shadow-strength) + 9%));
  --inner-shadow-sm: inset 0 1px 2px 0
    hsl(var(--shadow-color) / calc(var(--shadow-strength) + 9%));
  --inner-shadow-md: inset 0 1px 4px 0
    hsl(var(--shadow-color) / calc(var(--shadow-strength) + 9%));
  --inner-shadow-lg: inset 0 2px 8px 0
    hsl(var(--shadow-color) / calc(var(--shadow-strength) + 9%));
  --inner-shadow-xl: inset 0 2px 14px 0
    hsl(var(--shadow-color) / calc(var(--shadow-strength) + 9%));
  --ratio-square: 1;
  --ratio-landscape: 4/3;
  --ratio-portrait: 3/4;
  --ratio-widescreen: 16/9;
  --ratio-ultrawide: 18/5;
  --ratio-golden: 1.618/1;

  // create CSS variables around spacing, font-sizes etc.
  // z-index
  @each $name, $size in $token-index {
    --index-#{$name}: #{$size};
  }
  // genrate the sizes variables
  @each $name, $size in $token-sizes {
    --size-#{$name}: #{size($size)};
  }

  // genrate the width-height variables
  @each $name, $width in $token-width-height {
    --size-#{$name}: #{$width};
  }
  // genrate the line-height variables
  @for $i from 1 through 5 {
    --lh-#{$i}: #{$i};
  }

  // create CSS variables around breakpoints
  @each $name, $bp in $token-breakpoints {
    --bp-#{$name}: #{$bp};
  }

  // font families
  @each $name, $value in $token-font-families {
    --ff-#{$name}: #{$value};
  }
   // font size variables
   @each $name, $size in $token-font-sizes {
    --fs-#{$name}: #{size($size)};
  }
  
  // space size variables for mardin and padding
  @each $name, $size in $token-spacer-sizes {
    --space-#{$name}: #{size($size)};
  }
  
  // font weight
  @each $name, $value in $token-font-weights {
    --fw-#{$name}: #{$value};
  }
  
  // transitions
  @for $i from 1 through 5 {
    --transition-#{$i * 100}: all #{$i * 100}ms ease;
  }
}

// Dark theme
@media (prefers-color-scheme: dark) {
  :root {
    color-scheme: dark;
    :where(html) {
      --shadow-color: 220 40% 2%;
      --shadow-strength: 25%;
    }

    // new

    @each $name, $shades in $token-dark-theme {
      @each $shade, $value in $shades {
        --color-#{$name}-#{$shade}: #{$value};
      }
    }
  }
}

// Light theme
@media (prefers-color-scheme: light) {
  :root {
    color-scheme: light;

    @each $color, $shades in $token-light-theme {
      @each $shade, $value in $shades {
        --color-#{$name}-#{$shade}: #{$value};
      }
    }
  }
}

// :root {
//     [data-theme="light"] {
//     color-scheme: light;
//     @each $name, $color in $token-light-theme {
//       --color-#{$name}: var(--color-#{$color});
//     }
//   }
// }

// moving these style under index.scss as this file as globla vaiable
// /*******
// * compositions classes
// *******/
// @import './compositions/_compositions-dir';

// // /*******
// // * generative utility classes
// // *******/
// @import './utilities/_utilities-dir';  // all utilities in one scss file
